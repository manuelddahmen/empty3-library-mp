/*
 *
 *  *
 *  *  * Copyright (c) 2025. Manuel Daniel Dahmen
 *  *  *
 *  *  *
 *  *  *    Copyright 2024 Manuel Daniel Dahmen
 *  *  *
 *  *  *    Licensed under the Apache License, Version 2.0 (the "License");
 *  *  *    you may not use this file except in compliance with the License.
 *  *  *    You may obtain a copy of the License at
 *  *  *
 *  *  *        http://www.apache.org/licenses/LICENSE-2.0
 *  *  *
 *  *  *    Unless required by applicable law or agreed to in writing, software
 *  *  *    distributed under the License is distributed on an "AS IS" BASIS,
 *  *  *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  *  *    See the License for the specific language governing permissions and
 *  *  *    limitations under the License.
 *  *
 *  *
 *
 *
 *
 *  * Created by $user $date
 *
 *
 */
plugins {
    id("application") // enabling the plugin here
    id("java")
    id 'java-library'
    id 'maven-publish'
    id 'org.jreleaser' version '1.14.0'
    id 'signing'
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
}
kotlin {
    jvmToolchain(21)
}
sourceCompatibility = 21
targetCompatibility = 21

tasks.withType(JavaCompile).configureEach {
    options.release = 21
}

configurations {
    desktopCompile
    androidCompile
    testCompile

    compileOnly.extendsFrom desktopCompile
    testOnly.extendsFrom desktopCompile

    desktop {
        extendsFrom desktopCompile
//        extendsFrom runtime
    }
    android {
        extendsFrom androidCompile
//        extendsFrom runtime
    }
    test {
        extendsFrom testCompile

    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/test/java'
        }
        resources {
            srcDirs "src/main/resources", "src/main/configs", "src/main/java"
        }
    }
    test {
        java {
            srcDirs 'src/test/java'
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs "src/test/resources", "src/test/configs", "src/test/java"
        }
        mainClasses {
            "one.empty3.library1.tree.TestStringAnalyzer5"
            "one.empty3.library1.tree.TestStringAnalyzer7"
            "one.empty3.library1.tree.TestAlgebraicTreeVector"
        }
    }
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.kotlin.srcDirs += 'src/main/java'
    test.kotlin.srcDirs += 'test/main/kotlin'
    test.kotlin.srcDirs += 'test/main/java'
    test.java.srcDirs += 'src/test/java'
    test.java.srcDirs += 'src/main/java'
}


//kotlin {
//macosX64('native') { // on macOS
// linuxX64('native') // on Linux
//    mingwX64('native') // on Windows
//        binaries {
//            executable()
//        }
//}

Properties properties = new Properties()
try {
    // Other configuration here
    File propertiesFile = new File('../private.properties/gradle.properties')
    propertiesFile.withInputStream {
        properties.load(it)
    }
} catch (Exception ex) {
    ex.printStackTrace()
}


Properties propertiesReleaseConfig = new Properties()
try {
    // Other configuration here
    File propertiesFile = new File('C:\\Users\\manue\\.jreleaser\\config.properties')
    propertiesFile.withInputStream {
        propertiesReleaseConfig.load(it)
    }
} catch (Exception ex) {
    ex.printStackTrace()
}


tasks.register('copyDeps', Copy) {
    from(configurations.compile + configurations.testCompile) {
        include "**/*.jar"
        include "**/*.xml"
        include "**/*.properties"
        include "**/*.dll"
        include "**/*.so"
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
def load = properties
java {
    withSourcesJar()
}

tasks.register('FeatureAppGui', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.feature.ClassSchemaBuilder'
    args "arg1", "arg2"
    dependsOn(jar)
}
tasks.register('MorphingAppGui', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.apps.morph.Main'
    args "arg1", "arg2"
    dependsOn(jar)
}
tasks.register('OpadGameGui', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.apps.opad.PanelGraphics'
    dependsOn(jar)
}
tasks.register('BoardGameGui', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.apps.newboardgames.WindowDrawing'
    args "arg1", "arg2"
    dependsOn(jar)
}
tasks.register('ResolutionCharacter8', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.feature.tryocr.ResolutionCharacter8'
    args "arg1", "arg2"
    dependsOn(jar)
}
tasks.register('OCR', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.feature.tryocr.OCR1'
    args "arg1", "arg2"
    dependsOn(jar)
}
tasks.register('RunEffect from sets directory', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.feature.Run'
    args "fourier_series"
    dependsOn(jar)
}

tasks.register('TestObjet__TestPlanets', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.testscopy.tests.TestPlanets'
    args "fourier_series"
    dependsOn(jar)
}
tasks.register('TestHumainMarche', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.testscopy.tests.TestHumainMarche2'
    args "fourier_series"
    dependsOn(jar)
}
tasks.register("one.empty3.apps.facedetect.gcp.FaceDetectApp", JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = "one.empty3.apps.facedetect.gcp.FaceDetectApp"
    args "image0.jpg", "image1.jpg", "image1.txt"
    dependsOn(jar)
}


tasks.register('Paysage', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.testscopy.tests.test4.Paysage'
    args 'one.empty3.testscopy.tests.test4.Paysage'
    dependsOn(jar)
}
tasks.register('Balade', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.testscopy.tests.test4.Balade'
    args 'one.empty3.testscopy.tests.test4.Balade'
    dependsOn(jar)
}
tasks.register('runtest', JavaExec) {
    classpath sourceSets.main.runtimeClasspath, sourceSets.test.runtimeClasspath
    mainClass = 'one.empty3.TestRun'
    args "className"
    dependsOn(jar)
}


tasks.register('Balade1', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.testscopy.tests.test4.Balade1'
    args 'one.empty3.testscopy.tests.test4.Balade1'
    dependsOn(jar)
}
/***
 * Individial empty3 3d-object software tests.
 */
tasks.register('tests.tests2.cadeau.SphereCube', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'tests.tests2.cadeau.SphereCube'
    args ""
    dependsOn(jar)
}
tasks.register('tests.tests2.cubes.TestCubes', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'tests.tests2.cubes.TestCubes'
    args ""
    dependsOn(jar)
}

tasks.register('tests.tests2.rotation.TestRotationsObjets', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'tests.tests2.rotation.TestRotationsObjets'
    args ""
    dependsOn(jar)
}

tasks.register('one.empty3.lasttests.TestTubeVisit', JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'one.empty3.test.tests.TestTubeVisit'
    args ""
    dependsOn(jar)
}


tasks.register('one.empty3.tests.TestPlanetEtLune1', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'one.empty3.tests.coursecheval.TestCourseChevalPS'
    args ""
    dependsOn(jar)
}

tasks.register('one.empty3.tests.TestCourseChatPS', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'one.empty3.tests.coursecheval.TestCourseChatPS'
    args ""
    dependsOn(jar)
}

tasks.register('RunPerceptronAndCharacterClassifiers', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'one.empty3.neuralnetwork.of.RunPerceptronAndCharacterClassifiers'
    args ""
    dependsOn(jar)
}
tasks.register('TestHumanHeadTexturing', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'one.empty3.tests.humanheadtexturing.TestHumanHeadTexturing'
    args ""
    dependsOn(jar)
}

tasks.register('FaceDetectApp.gui', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'one.empty3.apps.facedetect.JFrameEditPolygonsMappings'
    args ''
    dependsOn(jar)
}

tasks.register('one.empty3.library1.tree.TestStringAnalyzer5', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'one.empty3.library1.tree.TestStringAnalyzer5'
    testing
    args ''
    dependsOn(jar)
}

tasks.register('one.empty3.library1.tree.TestStringAnalyzer8java', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'one.empty3.library1.tree.TestStringAnalyzer8java'
    testing
    args ''
    dependsOn(jar)
}

tasks.register('Voronoi', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = "one.empty3.exp.Voronoi"
    args ''
    dependsOn(jar)
}

tasks.register('FaceDetectApp', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = "one.empty3.apps.facedetect.gcp.FaceDetectApp"
    args ''
    dependsOn(jar)
}
tasks.register('FaceDetectAppEditor', JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = "one.empty3.apps.facedetect.JFrameEditPolygonsMappings"
    args ''
    dependsOn(jar)

}


signing {
    def signingKey = load.get("signing.keyId")
    def signingPassword = load.get("signing.password")

    useGpgCmd()

}


compileTestKotlin {
    dependencies {
      //  implementation 'one.empty3.libs:commmons-mp:2024.12.29'
    }
}
dependencies {
    androidCompile "one.empty3.libs:partial-android:0.0.11"
    desktopCompile "one.empty3.libs:partial-desktop:0.0.18"
    implementation "one.empty3.libs:commons-mp:0.0.8"
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.9.2'
    implementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    implementation 'junit:junit:4.13.2'
    testImplementation project(path: ':')
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'junit:junit:4.13.2'
    def jogl = '2.3.2'
    implementation "org.jogamp.jogl:jogl-all:$jogl"
    implementation group: 'org.jogamp.gluegen', name: 'gluegen-rt-main', version: "$jogl"
    implementation group: 'org.jogamp.jogl', name: 'jogl-all-main', version: "$jogl"
    //implementation 'ai.djl:api:0.21.0'
    implementation("org.jcodec:jcodec-javase:0.2.5")
    implementation("org.jcodec:jcodec-javase:0.2.5")
    implementation("org.jogamp.jogl:jogl-all-main:$jogl")
    implementation("com.miglayout:miglayout:3.7.4")
    implementation("xom:xom:1.3.9")
    implementation("com.jgoodies:jgoodies-common:1.8.1")
    implementation("com.jgoodies:jgoodies-forms:1.9.0")
    implementation('xerces:xercesImpl:2.12.2')
    implementation 'com.formdev:flatlaf:3.0'
    implementation("org.jdesktop:beansbinding:1.2.1")
    implementation("com.github.sarxos:webcam-capture:0.3.12")
    implementation group: 'commons-net', name: 'commons-net', version: '3.9.0'
    implementation("org.jdom:jdom2:2.0.6.1")
    implementation("org.apache.servicemix.bundles:org.apache.servicemix.bundles.jdom:2.0.6.1_1")
    testImplementation('org.junit.jupiter:junit-jupiter:5.9.2')
    //implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.20"
    implementation 'org.apache.santuario:xmlsec:4.0.1'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation platform('com.google.cloud:libraries-bom:26.39.0')
    implementation 'com.google.cloud:google-cloud-vision'
    implementation 'com.google.apis:google-api-services-vision:v1-rev20231219-2.0.0'
    implementation 'com.google.cloud:google-cloud-vision:3.41.0'
    implementation platform('com.google.cloud:libraries-bom:26.38.0')
    implementation 'com.google.cloud:google-cloud-storage'
    implementation "com.google.apis:google-api-services-vision:v1-rev20231219-2.0.0"
    implementation "com.google.auth:google-auth-library-oauth2-http:1.23.0"
    implementation 'com.google.guava:guava:32.0.1-android'
    implementation "com.google.http-client:google-http-client-jackson2:1.44.2"
    implementation 'org.junit.platform:junit-platform-launcher:1.9.2'
//    implementation "androidx.tracing:tracing:1.2.0"

}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}



tasks.register('copyTask', Copy) {
    // duplicateStrategy = DuplicatesStrategy.WARN
    from 'src/main/java/'
    into 'build/classes/java/main'
}

java {
    withJavadocJar()
    withSourcesJar()
}
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

tasks.named("processTestResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.named("processResources") {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.register("publishAll") {
    dependsOn(getTasksByName("publishAllPublicationsToJetBrainsSpaceEmpty3Repository", true))
    dependsOn(getTasksByName("publishAllPublicationsToOSSRHRepository", true))
    dependsOn(getTasksByName("publishMavenPublicationToMavenLocal", true))
}

def versionName = ''
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'one.empty3'
            artifactId = 'empty3-library-mp'
            version = '2025.1.22-1'
            from components.java
            project.tasks.withType(Sign) {
                signatures.all {

                }
            }

            // The pom can be enriched as usual
            pom {
                name = 'empty3-library-mp'
                description = '3D rendering engine. Plus modelling. Expected glsl textures 3d and 2d rendering' +
                        '3D primitives, and a lot of scenes\' samples to test.' +
                        '+ Game Jogl reworked, Calculator (numbers and vectors). Java code parser implementation starts (<=1.2)'
                packaging 'jar'
                url = "https://github.com/manuelddahmen/empty3-library-mp"
                version '2025.1.22-1'
                inceptionYear = '2008'
                licenses {
                    license {
                        name = "Apache version 2"
                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                        distribution = "repo"
                    }
                }

                scm {

                    url = "https://github.com/manuelddahmen/empty3-library-mp"
                    connection = "scm:git:https://github.com/manuelddahmen/empty3-library-mp.git"
                    developerConnection = "scm:git:https://github.com/manuelddahmen/empty3-library-mp.git"

                }
                developers {
                    developer {
                        email = "manuel.dahmen@gmx.com"
                        name = "Manuel Daniel Dahmen"

                        url = "https://empty3.one"
                        id = "manuelddahmen"
                    }
                }

            }
        }
    }

    repositories {
        /*  maven {
              name = "JetBrainsSpaceEmpty3"
              url = "https://maven.pkg.jetbrains.space/empty3/p/empty3/maven/maven"
              credentials {
                  // Automation has a special account for authentication in Space
                  // account credentials are accessible via env vars
                  username = load.get("spaceUsername")
                  password = load.get("spacePassword")
              }

          }*/
        /*maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = load.get("ossrhUsername")
                password = load.get("ossrhPassword")
            }

        }*/
/*
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/manuelddahmen/empty3_miror")
            credentials {
                username = load.get("GITHUB_ACTOR")
                password = load.get("GITHUB_TOKEN")
            }
        }*/
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }

    }
}

jreleaser {
    signing {

        active = 'ALWAYS'
        armored = true
        mode = 'FILE'
        publicKey = load.get('signing.publicKeyPath')
        passphrase = load.get('signing.passphrase')
        secretKey = load.get('signing.secretKey')
        release.github.token = load.get('release.github.token')

    }
    project {
        name = 'empty3-library-mp'
        java.artifactId = 'empty3-library-mp'
        java.groupId = 'one.empty3'
        java.version = '2025.1.22-1'
        version = '2025.1.22-1'
        license = 'Apache-2.0'
        authors = ['Manuel D DAHMEN']
        description = '3D rendering engine. Plus modelling. Expected glsl-like textures 3d and rendering' +
                '3D primitives, and a lot of scenes\' samples to test.' +
                '+ Game Jogl reworked, Calculator (numbers and vectors). Java code parser implementation starts (<=1.2)'
        copyright = "Author : Manuel D. Dahmen, License: Apache-2"
        icon {
            // Publicly available URL. PNG format is preferred.
            //
            url = 'https://empty3.one/favicon.ico'
            // Marks this icon as the primary one.
            // Only a single icon may be set as primary.
            //
            primary = true
            // Image width in pixels.
            //
            width = 47
            // Image height in pixels.
            //
            height = 47
        }
    }

    deploy {
        maven {
            // Enable or disable all configured deployers.
            // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
            // Defaults to `ALWAYS`.
            //
            active = 'ALWAYS'
            pomchecker {
                // Defines the tool version to use.
                //
                version = '1.11.0'

                // Fail the release if pomchecker outputs a warning.
                // Defaults to `true`.
                //
                failOnWarning = false

                // Fail the release if pomchecker outputs an error.
                // Defaults to `true`.
                //
                failOnError = false
            }
            mavenCentral {
                app {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    gitRootSearch = false
                    username = propertiesReleaseConfig.get('JRELEASER_MAVENCENTRAL_USERNAME')
                    password = propertiesReleaseConfig.get('JRELEASER_MAVENCENTRAL_PASSWORD')
                    authorization = 'BASIC'
                    // Password for login into the MAVENCENTRAL service.
                    //
                    // List of directories where staged artifacts can be found.
                    stagingRepository('build/staging-deploy')

                    // Defines the connection timeout in seconds.
                    // Defaults to `20`.
                    //
                    connectTimeout = 20

                    // Defines the read timeout in seconds.
                    // Defaults to `60`.
                    //
                    readTimeout = 60


                    // Registered publication namespace.
                    // Defaults to `${project.java.groupId}`.
                    //
                    namespace = 'one.empty3'

                    // Deployment identifier used for publication.
                    //
                    deploymentId = '27d4cb92-0141-4a3f-b2e1-38c801bfafb0'

                    // Time to wait between state transition checks, in seconds.
                    // Defaults to `10`.
                    //
                    retryDelay = 10

                    // Maximum number of attempts to verify state transition.
                    // Defaults to `60`.
                    //
                    maxRetries = 60
                }
            }
        }
    }
    upload {
        // Enable or disable all configured uploaders.
        // Supported values are [`NEVER`, `ALWAYS`, `RELEASE`, `SNAPSHOT`].
        // Defaults to `ALWAYS`.
        //
        active = 'ALWAYS'
    }
}
